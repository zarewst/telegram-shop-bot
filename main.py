# pip install aiogram
# pip install python-dotenv

from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, CallbackQuery, LabeledPrice
from keyboards import *
from database import *
from dotenv import load_dotenv
import os
from datetime import datetime

load_dotenv()

TOKEN = os.getenv('TOKEN')
PAYMENT = os.getenv('PAYMENT')

bot = Bot(TOKEN, parse_mode='HTML')

dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    full_name = message.from_user.full_name
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{full_name}</b>\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∫—É—Å–Ω—è—Ö–∞ –ë–æ—Ç')
    await register_user(message)


async def register_user(message: Message):
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    user = first_select_user(chat_id)  # —Ñ—É–Ω–∫—É–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
    if user:
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await show_main_menu(message)
    else:
        first_register_user(chat_id, full_name)  # —Ñ—É–Ω–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', reply_markup=share_contact_button())


@dp.message_handler(content_types=['contact'])
async def finish_register(message: Message):
    chat_id = message.chat.id
    phone = message.contact.phone_number
    update_user_to_finish_register(chat_id, phone)
    await create_cart_for_user(message)  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    await show_main_menu(message)  # –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é


async def create_cart_for_user(message: Message):
    chat_id = message.chat.id
    try:
        insert_to_cart(chat_id)
    except:
        pass


async def show_main_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=generate_main_menu())


@dp.message_handler(lambda message: '‚úî –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
async def make_order(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=buttons_category_menu())


@dp.callback_query_handler(lambda call: 'category' in call.data)
async def show_products(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    _, category_id = call.data.split('_')
    category_id = int(category_id)
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', chat_id, message_id,
                                reply_markup=buttons_products_by_category(category_id))


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def return_to_main_menu(call: CallbackQuery):
    chat_id = call.message.chat.id  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_id = call.message.message_id  # id —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_text(chat_id=chat_id,
                                message_id=message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                reply_markup=buttons_category_menu())


@dp.callback_query_handler(lambda call: 'product' in call.data)
async def show_detail_product(call: CallbackQuery):
    chat_id = call.message.chat.id  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_id = call.message.message_id  # id —Å–æ–æ–±—â–µ–Ω–∏—è
    _, product_id = call.data.split('_')
    product_id = int(product_id)

    product = get_product_detail(product_id)
    await bot.delete_message(chat_id, message_id)
    with open(product[-1], mode='rb') as img:
        await bot.send_photo(chat_id=chat_id,
                             photo=img,
                             caption=f'''{product[2]}

–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã: {product[4]}

–¶–µ–Ω–∞: {product[3]} —Å—É–º–º''', reply_markup=generate_product_detail_menu(product_id=product_id, category_id=product[1]))


@dp.callback_query_handler(lambda call: 'back' in call.data)
async def return_to_category(call: CallbackQuery):
    chat_id = call.message.chat.id  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_id = call.message.message_id  # id —Å–æ–æ–±—â–µ–Ω–∏—è
    _, category_id = call.data.split('_')
    await bot.delete_message(chat_id, message_id)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', reply_markup=buttons_products_by_category(category_id))


@dp.callback_query_handler(lambda call: 'cart' in call.data)
async def add_product_cart(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, product_id, quantity = call.data.split('_')
    product_id, quantity = int(product_id), int(quantity)

    cart_id = get_user_cart_id(chat_id)
    product = get_product_detail(product_id)
    print(cart_id)
    print(product)

    final_price = product[3] * quantity  # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞

    if insert_or_update_cart_product(cart_id, product[2], quantity, final_price):
        await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        await bot.answer_callback_query(call.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(regexp='üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: Message, edit_message: bool = False):
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)

    try:
        update_total_product_total_price(cart_id)  # –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–∏—Ç –≤—ã–ø–æ–Ω—è—Ç—å –ø–æ–¥—Å—á—ë—Ç —á–µ–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã carts
    except Exception as e:
        print(e)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
        return

    cart_products = get_cart_products(cart_id)  # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    total_products, total_price = get_total_product_price(
        cart_id)  # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—è—â—è–µ—Ç –æ–±—à —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ–∫–∞ –∏ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

    text = '–í–∞—à –∑–∞–∫–∞–∑: \n\n'
    i = 0
    for product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {0 if total_products is None else total_products}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {0 if total_price is None else total_price}'''


    if edit_message:
        await bot.edit_message_text(text, chat_id, message.message_id, reply_markup=generate_cart_menu(cart_id))
    elif total_products == None:
        await message.answer('‚ùó‚ùó‚ùó –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚ùó‚ùó‚ùó')
    else:
        await bot.send_message(chat_id, text, reply_markup=generate_cart_menu(cart_id))


@dp.callback_query_handler(lambda call: 'delete' in call.data)
async def delete_cart_product(call: CallbackQuery):
    _, cart_product_id = call.data.split('_')
    message = call.message
    cart_product_id = int(cart_product_id)

    delete_cart_product_from_database(cart_product_id)

    await bot.answer_callback_query(call.id, text='–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
    await show_cart(message, edit_message=True)


@dp.callback_query_handler(lambda call: 'order' in call.data)
async def create_order(call: CallbackQuery):
    chat_id = call.message.chat.id

    _, cart_id = call.data.split('_')
    cart_id = int(cart_id)

    time_order = datetime.now().strftime('%H:%M')
    data_order = datetime.now().strftime('%d.%m.%Y')

    cart_products = get_cart_products(cart_id)  # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    total_products, total_price = get_total_product_price(cart_id)  # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—è—â—è–µ—Ç –æ–±—à —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ–∫–∞ –∏ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤


    save_order_total(cart_id, total_products, total_price, time_order, data_order)
    order_total_id = orders_total_price_id(cart_id)




    text = '–í–∞—à –∑–∞–∫–∞–∑: \n\n'
    i = 0
    for product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

        save_order(order_total_id, product_name, quantity, final_price)
    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {0 if total_products is None else total_products}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {0 if total_price is None else total_price}
–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 10000 —Å—É–º–º'''


    await bot.send_invoice(
        chat_id=chat_id,
        title=f'–ó–∞–∫–∞–∑ ‚Ññ{cart_id}',
        description=text,
        payload='bot-defined invoice payload',
        provider_token=PAYMENT,
        currency='UZS',
        prices=[
            LabeledPrice(label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', amount=int(total_price * 100)),
            LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=1000000)
        ],
        start_parameter='start_parameter'
    )


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query):
    await bot.answer_pre_checkout_query(pre_checkout_query.id,
                                        ok=True,
                                        error_message='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


@dp.message_handler(content_types=['successful_payment'])
async def get_payment(message):
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)
    await bot.send_message(chat_id, '–£—Ä–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ú—ã –≤–∞—Å –∫–∏–Ω—É–ª–∏')
    drop_cart_products_default(cart_id)


@dp.message_handler(lambda message: 'üìí –ò—Å—Ç–æ—Ä–∏—è' in message.text)
async def show_history_orders(message: Message):
    chat_id =message.chat.id
    cart_id = get_user_cart_id(chat_id)
    check_orders = get_check_orders(cart_id)
    print(check_orders)
    for i in check_orders:
        text = f'''–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {i[-1]}
–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ üïê : {i[-2]}
–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {i[3]}
–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {i[2]}\n\n'''
        products = get_products_check(i[0])
        for j in products:
            text += f'''–ü—Ä–æ–¥—É–∫—Ç: {j[0]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {j[1]}
–°—Ç–æ–∏–º–æ—Å—Ç—å: {j[2]}\n\n\n'''

        await bot.send_message(chat_id, text)

















executor.start_polling(dp)
